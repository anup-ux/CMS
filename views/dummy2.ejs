<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <%- include('link.ejs') %>
        <title>Dummy</title>
</head>

<body>
    <%if(objectName.length!==0){%>
        <div class="d-flex justify-content-center">
            <h5>
                Welcome
                <%=objectName[0].name%>
            </h5>
        </div>
        <div class="d-flex justify-content-center">
            <img class="rounded-circle" src="<%=objectName[0].image%>" alt="no image" width="100">
        </div> -->
        <div class="d-flex justify-content-center">
            <a href="/logout" class="btn btn-danger btn-sm mt-3">Logout</a>
        </div>
        <%}else{%>
            <div class="d-flex flex-row-reverse py-1" id="modal">
                <button class="btn btn-danger btn-sm mr-3" data-toggle="modal" data-target="#login">Login</button>
                <button class="btn btn-primary btn-sm mr-3 py-1" data-toggle="modal" data-target="#register">Sign up</button>
            </div>
            <%}%>

                <div id="currentPage">
                </div>
                <div id="peginationdyn"></div>
                <div id="dynLimit" class="ml-3">
                    <label for="theLimit ">Enter a limit:</label>
                    <input type="text " name="theLimit " id="limit" class="form-control w-25 ">
                </div>
                <div class="container mt-4 ">
                    <div class="d-flex justify-content-between align-items-center py-4">
                        <h1>Articles</h1>
                        <div class="d-flex justify-content-center search-bar input-group">
                            <spam class="fa fa-search search-icon input-group-text"></spam>
                            <input type="text" class="form-control w-90" placeholder="Search here... " id="searchBar" />
                            <i class="fas fa-spinner fa-spin d-none" id="spin-loading-icon"></i>
                        </div>
                        <%if(objectName.length!==0){%>
                            <a class="btn btn-primary " href="insert "><i class="fa fa-plus-circle " aria-hidden="true "></i> Create
                Article</a>
                            <%}%>
                    </div>
                    <table class="table" id="table">
                        <thead>
                            <%if(objectName.length!==0){%>
                                <tr>
                                    <th>ID</th>
                                    <th>Title</th>
                                    <th>Image</th>
                                    <th>CRUD</th>
                                </tr>
                                <%}%>
                        </thead>
                        <tbody>
                            <%data.forEach((item)=>{%>
                                <tr>
                                    <td>
                                        <div class="col-sm ">
                                            <a href=<%=item.id%>><%=item.id%></a>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="col-sm ">
                                            <%=item.title%>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="col-sm ">
                                            <img src="<%=item.file%>" alt="" width="100">
                                        </div>
                                    </td>
                                    <%if(objectName.length!==0){%>
                                        <td class="mr-4"><button data-deletebutton="<%=item.id%>" class="btn btn-danger btn-sm"><i class="far fa-trash-alt"></i>Delete</button></td>
                                        <td class="ml-4"><a class="btn btn-success btn-sm" href=update/<%=item.id%>>Update</a></td>
                                        <%}%>
                                </tr>
                                <%})%>
                        </tbody>
                    </table>
                </div>
                <div class="justify-content-center align-items-center" id="dynamicpages">

                </div>
                <div class="d-flex justify-content-center align-items-center" id="pages">
                    <button date-page="<%=page%>" data-limit="<%=limit%>" class="btn btn-primary mr-3 d-none" id="previous">pre>></button>
                    <% for(let i=1;i<=(Math.ceil(count[0].count/limit));i++){%>
                        <button data-page="<%-i%>" data-limit="<%=limit%>" data-count="<%=count[0].count/limit%>" class="btn btn-primary mr-3" id="numbutton"><%- i %></button>
                        <% }%>
                            <% if(page < (count[0].count/limit)){%>
                                <button data-page="<%=2%>" data-limit="<%=limit%>" data-count="<%=count[0].count/limit%>" class="btn btn-primary" value="<%-page%>" id="nxtbtn">Next<<</button>
                                <%}%>
                </div>
                <div class="modal fade" id="register" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">Register</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
                            </div>
                            <div class="modal-body">
                                <form action="/signup/user/new" method="POST" enctype="multipart/form-data">
                                    <div class="form-group">
                                        <label for="username" class="col-form-label">Enter your name:</label>
                                        <input type="text" class="form-control" id="username" name="uname" required>
                                        <label for="lname" class="col-form-label">Last Name:</label>
                                        <input type="text" class="form-control" id="lname" name="lname" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="email" class="col-form-label">Enter your email:</label>
                                        <input type="email" class="form-control" id="email" name="email" required>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-form-label">Profile picture</label>
                                        <input type="file" name="image" id="img">
                                    </div>
                                    <div class="form-group">
                                        <label for="pass" class="col-form-label">Enter your password</label>
                                        <input type="password" class="form-control" id="passw" name="pass" required>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="flexCheckDefault0" onclick="changeType()">
                                        <label class="form-check-label" for="flexCheckDefault0" id="toggle">
                             show
                            </label>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                                        <button type="submit" class="btn btn-primary">Register</button>
                                    </div>
                                </form>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="modal fade" id="login" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">Login</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
                            </div>
                            <div class="modal-body">
                                <form action="/user/login" method="POST" id="login-form">
                                    <div class="form-group">
                                        <label for="email" class="col-form-label">Enter your email:</label>
                                        <input type="email" class="form-control" id="mail" name="email" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="pass" class="col-form-label">Enter your password</label>
                                        <input type="password" class="form-control" id="pass" name="pass" required>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="flexCheckDefault" onclick="LoginchangeType()">
                                        <label class="form-check-label" for="flexCheckDefault" id="toggle">
                             show
                            </label>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                                        <button type="submit" class="btn btn-primary">Login</button>
                                    </div>
                                </form>
                            </div>

                        </div>
                    </div>
                </div>
                <script>
                    function changeType() {
                        const pass = document.getElementById("passw")
                        const checkbtn = document.getElementById("flexCheckDefault0")
                        if (checkbtn.checked) {
                            pass.type = 'text'
                        } else {
                            pass.type = 'password'
                        }
                    }

                    function LoginchangeType() {
                        const pass = document.getElementById("pass")
                        const checkbtn = document.getElementById("flexCheckDefault")
                        if (checkbtn.checked) {
                            pass.type = 'text'
                        } else {
                            pass.type = 'password'
                        }
                    }
                    // for btns to say this page outta these oages
                    function dynamicPages(page, totalpages, limit) {
                        let pageValue = totalpages.map(mapPages => {
                            console.log("map has", mapPages);
                            console.log("page value in map", page);
                            let pages = Math.ceil(mapPages.count / limit)
                            console.log("pages in map", pages);
                            return `<p> page ${page} out of ${pages}`
                        }).join("")
                        document.querySelector("#currentPage").innerHTML = pageValue
                    }
                    // for btns nxt or previous
                    function buttonsFunction(currentPage, totalPages) {
                        const next = document.getElementById("nxtbutton")
                        const previous = document.getElementById("prevbtn")
                        console.log("current page", currentPage);
                        console.log("total pages inside btn fn", totalPages);
                        if (currentPage === 1) {
                            previous.setAttribute("disabled", true)
                        } else {
                            previous.removeAttribute("disabled")

                        }
                        if (currentPage >= Math.ceil(totalPages)) {
                            next.setAttribute("disabled", true)
                        } else {
                            next.removeAttribute("disabled")
                        }
                    }
                    // fn for pages like 1234
                    function noOfPages(pages, totalArticles, limit)
                    {
                        let btnValue = Number(Math.ceil(totalArticles / limit))
                        let buttons = ""
                        for (let i = 1; i <= btnValue; i++) {
                            buttons += `<button class="btn btn-primary mr-3">${i}</button>`
                        }
                        const navbtn = `<button class="btn btn-primary mr-3" id="prevbtn">previous</button>
                       ${buttons}
                       <button class="btn btn-primary mr-3" id="nxtbutton">Next</button>`
                        console.log("buttons has", buttons);
                        console.log("btnValue", btnValue);
                        document.querySelector("#peginationdyn").innerHTML = navbtn
                    }
                    document.getElementById("dynLimit").addEventListener("keyup", (e) => {
                        let pageNumber = 1
                        let limitHere = e.target.value
                        console.log("limit here is", limitHere);
                        fetch(`/fetch?page=${Number(pageNumber)}&limit=${Number(limitHere)}`, {
                                method: "GET"
                            }).then(res => res.json())
                            .then((data) => {
                                console.log("data in dyn limit 2nd then", data);
                                console.log("total number", data.totalNumber[0].count);
                                constructingTableRows(data.totalList)
                                dynamicPages(pageNumber, data.totalNumber, limitHere) //total out of n pages
                                noOfPages(pageNumber, data.totalNumber[0].count, limitHere) //prev 123.... nxt
                                buttonsFunction(pageNumber, (data.totalNumber[0].count / limitHere))
                            }).catch((err) => {
                                console.log("error in dynamic limit", err);
                            })
                    })

                    const debounce = (func, delay) => {
                        let debounceTimer
                        return function() {
                            const context = this
                            const args = arguments
                            clearTimeout(debounceTimer)
                            debounceTimer = setTimeout(() => func.apply(context, args), delay);
                        }
                    }
                    const spinLoadingIcon = document.getElementById("spin-loading-icon");
                    const keyupHandler = (e) => {
                        spinLoadingIcon.classList.remove("d-none");
                        const targetValue = e.target.value;
                        fetch(`/article/search?search=${encodeURIComponent(targetValue)}`, {
                                method: "GET"
                            })
                            .then(res => res.json())
                            .then(json => {
                                console.log(json)
                                constructingTableRows(json);
                                spinLoadingIcon.classList.add("d-none");
                            })
                    }

                    const debouncedKeyupHandler = debounce(keyupHandler, 600);
                    document.getElementById("searchBar").addEventListener("keyup", debouncedKeyupHandler);

                    function constructingTableRows(articles) {
                        const rows = articles.map(articleItem => {
                            return `<tr>
                        <td>  <a href="${articleItem.id}">${articleItem.id}</a></td>
                        <td>
                            ${articleItem.title}
                        </td>
                        <td>
                            <img src="${articleItem.file}" alt="" width="100">
                        </td>`
                            if (objectName.length !== 0) {
                                ` <td><button data-deletebutton="${articleItem.id}" class="btn btn-danger btn-sm" onclick="checkDelete()"><i class="far fa-trash-alt"></i>Delete</button></td>
                            <td><a class="btn btn-success btn-sm" href=update/${articleItem.id}>Update</a></td>`
                            }

                            `</tr>`
                        }).join("");
                        document.querySelector('#table> tbody').innerHTML = rows;
                    }

                    // function searchfun() {
                    //     let searchVal = document.getElementById("search").value.toUpperCase()
                    //     console.log(searchVal)
                    //     let mytable = document.getElementById("table")
                    //     console.log(mytable);
                    //     let tr = mytable.getElementsByTagName('tr')
                    //     console.log(tr);
                    //     for (let i = 0; i < tr.length; i++) {
                    //         let td = tr[i].getElementsByTagName('td')[1]
                    //         if (td) {
                    //             let textValue = td.textContent || td.innerHTML
                    //             if (textValue.toUpperCase().indexOf(searchVal) > -1) {
                    //                 tr[i].style.display = ""
                    //             } else {
                    //                 tr[i].style.display = "none"
                    //             }

                    //         }
                    //     }

                    // }


                    document.getElementById("table").addEventListener("click", (e) => {
                            console.log(e.target.dataset.deletebutton);
                            console.log("e.target", e.target)
                            if (!e.target.dataset.deletebutton) {
                                return false;
                            }
                            swal({

                                    title: "Are you sure?",
                                    text: "Once deleted, you will not be able to recover this imaginary article!",
                                    icon: "warning",
                                    buttons: true,
                                    dangerMode: true,
                                })
                                .then((willDelete) => {
                                    if (willDelete) {
                                        fetch("/delete/" + e.target.dataset.deletebutton, {
                                                method: "DELETE"
                                            })
                                            .then(res => res.text())
                                            .then(() => {
                                                document.getElementById("table").deleteRow(e.target.parentNode.parentNode.rowIndex);
                                            })
                                            .catch(err => {
                                                console.log("This error is from catch block of delete:", err);
                                            })

                                        swal("Poof! Your article has been deleted!", {
                                            icon: "success",
                                        });
                                    } else {
                                        swal("Cancelled!!!");
                                    }
                                });

                        })
                        // spinLoadingIcon.classList.remove("d-none");
                    document.getElementById("pages").addEventListener("click", (e) => {
                        // const testing = dynLimit();
                        // console.log("asdasd", testing);
                        if (e.target.tagName !== "BUTTON") {
                            return false
                        }
                        const page = e.target.dataset.page;
                        const count = e.target.dataset.count
                        const nextBtn = document.getElementById("nxtbtn")
                        console.log("coun", count);
                        if (page > 1) {
                            const previous = document.getElementById("previous")
                            previous.setAttribute("data-page", parseInt(page) - 1)
                            previous.classList.remove("d-none");
                        } else {
                            previous.classList.add("d-none");
                        }
                        if (page >= count) {
                            nextBtn.classList.add("d-none")
                        } else {
                            nextBtn.classList.remove("d-none")

                        }
                        console.log("page", page);
                        const limit = e.target.dataset.limit
                        console.log("limit", limit);
                        const nextPage = parseInt(page) + 1
                        console.log("next page", nextPage);
                        const TargatedValue = e.target
                        console.log("TargatedValue", TargatedValue);
                        console.log("Targets inner html", TargatedValue.innerHTML);
                        console.log("the limit is", limit);
                        fetch(`/fetch?page=${Number(page)}&limit=${Number(limit)}`, {
                                method: "GET"
                            })
                            .then(res => res.json())
                            .then(data => {
                                if (TargatedValue.innerHTML != "Next") {
                                    console.log("count", count);
                                    console.log("target value if not next", parseInt(page) + 1);
                                    nextBtn.setAttribute("data-page", parseInt(page) + 1)
                                    constructingTableRows(data.totalList)
                                } else {
                                    constructingTableRows(data.totalList)
                                    console.log("Target here is", TargatedValue);
                                    TargatedValue.setAttribute("data-page", nextPage)
                                }


                            }).catch((err) => {
                                console.log("err from fetch page next", err);
                            })
                    })
                </script>
</body>

</html>